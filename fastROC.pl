#!/usr/bin/perl
use strict;
use File::Path qw(make_path);
use warnings;
use diagnostics;
use Scalar::Util qw(looks_like_number);
use Statistics::ROC;
use List::Util qw(shuffle);
################
# MAIN PROGRAM #
################

#my $maxLineCount=1000;
#Paramteres fopr priting
my @plotLegend=("10%", "20%", "30%", "40%");
 
#Assigning commandline arguments
my ($bf, $mf, $columnID, $plotTitle, $workingDir, $maxLineCount) = @ARGV;

# Check if working dir exists and create dir.
eval { make_path($workingDir) };
if ($@) {
  print "Couldn't create $workingDir: $@";
}

# filenames for this run.
my $plotoutput = $workingDir . "/". $workingDir . "-roc-plot.png";
my $gnuplotScriptFile=$workingDir . "/". $workingDir . "-plotme.sh";
my $plotDataPrefix=$workingDir  . "/". $workingDir . "-plotdata";

my @bfiles = split(',', $bf);
my @mfiles = split(',', $mf);

# Check the number of benign and malware fileas are the same.
if ($#bfiles != $#mfiles) {
	print "\nError! Differnet number of benign and morphfiles.\n";
	exit 1;
}

# For each benign - malware files, generate plotdata.
my @plotFiles;
for (my $i=0; $i <= $#bfiles; $i++) {
	my $plotfile = $plotDataPrefix . "_" . $i . ".txt";
	print "\n $bfiles[$i] $mfiles[$i] $plotfile\n";
	push @plotFiles, $plotfile;
	writePlotData( $bfiles[$i],$mfiles[$i],$columnID,$maxLineCount, $plotfile);
}

my @auc_list;

my $outFile;
open $outFile, '>', $workingDir . "/AUC.txt" or die "couldn't open file for writing: $!\n";
for (my $i=0; $i <= $#bfiles; $i++) {
			my $auc = findAUC($plotFiles[$i]);
				print "\n AUC : " . $auc . " @ $bfiles[$i]";
				print $outFile "\n AUC : " . findAUC($plotFiles[$i]) . " $plotLegend[$i]  @ $bfiles[$i]\n";
			push @auc_list, sprintf("%s AUC: %.3f", $plotLegend[$i], $auc);
}
close $outFile or die "couldn't close file: $!\n";

generatePlot( $plotoutput, $plotTitle, @plotFiles);

exit 0;

###############
# SUBROUTINES #
###############
sub readFile {
				my ($filename , $column_id, $max_count) = @_;
				my @scores;

				my $inFile;
				open $inFile, '<', $filename or die "couldn't open file for reading: $!\n";
				my $count = 0;
				while (my $data = <$inFile>) {
								chomp $data;
								my @values = split(',', $data);
								my $score = $values[$column_id];
								chomp $score;
								if ($score =~ /NaN/) {next; }

								if (looks_like_number($score)) {
												$score = $score + 0.0;
												$count = $count + 1;
												if ($count > $max_count) {last;}
												push @scores, $score;
								}

				}
				close $inFile or die "couldn't close file: $!\n";
				return @scores;
				#shuffle @scores;
				#return @scores[0..$max_count-1];
}

sub writePlotData {
				my ($bfile, $mfile, $column_id, $max_count, $plotdata) = @_;
				my @bs = readFile($bfile, $column_id, $max_count);
				my @ms = readFile($mfile, $column_id, $max_count);

				my @point_list;
				foreach my $score (@ms) {
								push @point_list, [$score, 0];
				}
				foreach my $score (@bs) {
								push @point_list, [$score, 1];
				}


				my $outFile;
				open $outFile, '>', $plotdata or die "couldn't open file for writing: $!\n";
				my @curves=roc('decrease',0.95, @point_list);

				for my $ref ($curves[1]) {
								for my $row (@$ref) {
												for my $col (@$row) {
																print $outFile  $col. "  ";
												}
												print  $outFile "\n";
								}
				}

				close $outFile or die "couldn't close file: $!\n";
}

sub generatePlot {
	my ($plotoutput, $plotTitle, @plotfiles) = @_;
	print "\n Plotfile : $plotoutput\n";

	my $flat_files = join(" ", @plotfiles);

	my $plotcmd = "plot ";
	for (my $i=0; $i <= $#bfiles; $i++) {
		if ($i > 0 ) {
			$plotcmd = $plotcmd . " , ";
		}
		my $f = $plotfiles[$i];
		$plotcmd = $plotcmd . " \"" . $f . "\" using 1:2 with lines title \"" . $auc_list[$i] . "\" ";
	}

#			'plot for [file in filelist] file using 1:2 with lines' . "\n";

	my $plotscript = 
			'#!/usr/bin/gnuplot' . "\n" .
			'reset' . "\n" .
			'set terminal png' . "\n" .
			'set xlabel "False Positive Rate"' . "\n" .
			'set ylabel "True Positive Rate"' . "\n" .
			'set xtics .1' . "\n" .
			'set ytics .1' . "\n" .
			'set key right bottom' . "\n".
			'set xrange [-0.025:1.025]' . "\n" .
			'set yrange [0:1.025]' . "\n" .
			'set title "' . $plotTitle . '"' . "\n" .
			'set grid' . "\n" .
			'set style line 1 lw 2' . "\n" .
			'filelist = "' . $flat_files .'"' . "\n" .
			$plotcmd. "\n";

	open $outFile, '>',	$gnuplotScriptFile or die "couldn't open file for writing: $!\n";
	print $outFile $plotscript;
	close $outFile or die "couldn't close file: $!\n";

# run the plot script
	system "chmod u+x " . $gnuplotScriptFile;
	system 	"./" . $gnuplotScriptFile . " > " . $plotoutput ;

	print "\n Plot generated at $plotoutput \n";
}

sub findAUC {
	my ($plotdata) = @_;
	my @xVals = `cat $plotdata | awk \'\{print \$1\}\'`;
	chomp @xVals;
	my @yVals = `cat $plotdata | awk \'\{print \$2\}\'`;
	chomp @yVals ;
	my $totalArea = 0;
	for (my $iter = 0; $iter < (scalar @xVals) - 1; $iter++) {
		$totalArea += abs($xVals[$iter] - $xVals[$iter+1]) * abs(($yVals[$iter] + $yVals[$iter+1]) / 2);
	}
	return $totalArea;
}

sub findAUC2 {
	my ($plotdata) = @_;
	my @xVals = `cat $plotdata | awk \'\{print \$1\}\'`;
	chomp @xVals;
	my @yVals = `cat $plotdata | awk \'\{print \$2\}\'`;
	chomp @yVals;
	my $totalArea = 0;
#Apply formula to compute
	for (my $iter = 0; $iter < (scalar @xVals) - 1; $iter++) {
		$totalArea += ($xVals[$iter+1] - $xVals[$iter]) * (($yVals[$iter] + $yVals[$iter+1]) / 2);
	}
	return $totalArea;
}

#  function auc=areaundercurve(FPR,TPR); 
#  % given true positive rate and false positive rate calculates the area under the curve 
#  % true positive are on the y-axis and false positives on the x-axis 
#  % sum rectangular area between all points 
#  % example: auc=areaundercurve(FPR,TPR); 
#  [x2,inds]=sort(FPR); 
#  x2=[x2,1]; % the trick is in inventing a last point 1,1 
#  y2=TPR(inds); 
#  y2=[y2,1]; 
#  xdiff=diff(x2); 
#  xdiff=[x2(1),xdiff]; 
#  auc1=sum(y2.*xdiff); % upper point area 
#  auc2=sum([0,y2([1:end-1])].*xdiff); % lower point area 
#  auc=mean([auc1,auc2]); 
