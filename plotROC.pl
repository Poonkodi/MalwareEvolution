#!/usr/bin/perl
use strict;
use warnings;
use diagnostics;

################
# MAIN PROGRAM #
################

# take in parameters
my %parameters;
readParams(\%parameters, @ARGV);
checkParams(\%parameters);

# declare variables
my $inFile;
my @benignScores;
my @malwareScores;

# read in benign scores
open $inFile, '<', $parameters{'-bscores'} or die "couldn't open file for reading: $!\n";
while (my $score = <$inFile>) {
	chomp $score;
	push @benignScores, $score;
}
close $inFile or die "couldn't close file: $!\n";

print("Benign files done\n");

# read in malware scores
open $inFile, '<', $parameters{'-mscores'} or die "couldn't open file for reading: $!\n";
while (my $score = <$inFile>) {
	chomp $score;
	push @malwareScores, $score;
}
close $inFile or die "couldn't close file: $!\n";

print("Malware files finished reading\n");

# set thresholds
my @thresholds;
foreach my $score (@benignScores) {
	push @thresholds, $score;
}
foreach my $score (@malwareScores) {
	push @thresholds, $score;
}
@thresholds = sort {$a <=> $b} @thresholds;

print("Thresholeds : ");
print(@thresholds);

# write data file for plot
writePlotData(\%parameters);
print("\nWriting Plot data .. Done\n");

# write the plot script
print("\nGenerating Plot\n");
writePlotScript(\%parameters);

# run the plot script
system "chmod u+x " . $parameters{'-sname'};
$parameters{'-sname'} =~ '/' ?
	system $parameters{'-sname'} . " > " . $parameters{'-pname'} :
	system "./" . $parameters{'-sname'} . " > " . $parameters{'-pname'};

# calculate AUC and print it to stdout
my $AUC = findAUC(\%parameters);
print "$AUC\n";
printf "%.5f", $AUC;
print "\n";  

# cleanup
#system "rm " . $parameters{'-sname'};
#system "rm " . $parameters{'-dname'};


###############
# SUBROUTINES #
###############

sub readParams {
	my $hkey;
	my $hvalue;
	my $href = shift @_;
	while (scalar @_ > 0) {
		$hkey = shift @_;
		$hvalue = shift @_;
		$href->{$hkey} = $hvalue;
	}
}

sub checkParams {
	my $success = 1;
	$success *= checkParam($_[0], "-bscores");
	$success *= checkParam($_[0], "-mscores");
	$success *= checkParam($_[0], "-ptitle");
	$success *= checkParam($_[0], "-sname");
	$success *= checkParam($_[0], "-dname");
	$success *= checkParam($_[0], "-pname");
	if (not $success) {
		print "DESCRIPTION:\n";
		printf "%-20s", " -bscores";
		print "benign scores file name\n";
		printf "%-20s", " -mscores";
		print "malware scores file name\n";
		printf "%-20s", " -ptitle";
		print "plot title\n";
		printf "%-20s", " -sname";
		print "plot script file name\n";
		printf "%-20s", " -dname";
		print "plot data file name\n";
		printf "%-20s", " -pname";
		print "plot file name\n";
		exit;
	}
}

sub checkParam {
	my $href = $_[0];
	if (not defined $href->{$_[1]}) {
		print "Missing \'$_[1]\' parameter\n";
		return 0;
	}
	return 1;
}

sub writePlotData {
	my $href = shift @_;
	my $outFile;
	open $outFile, '>', $href->{'-dname'} or die "couldn't open file for writing: $!\n";
	my $truePos;
	my $falsePos;
	foreach my $tvalue (@thresholds) {
		$truePos = 0;
		$falsePos = 0;
		foreach my $score (@malwareScores) {
			$score >= $tvalue ? $truePos++ : print "";
		}
		foreach my $score (@benignScores) {
			$score >= $tvalue ? $falsePos++ : print "";
		}
		$truePos = $truePos / scalar @malwareScores;
		$falsePos = $falsePos / scalar @benignScores;
		print $outFile "$falsePos $truePos\n";
	}
	print $outFile "0 0\n";
	close $outFile or die "couldn't close file: $!\n";
}

sub writePlotScript {
	my $href = shift @_;
	my $outFile;
	my $plotscript = '#!/usr/bin/gnuplot' . "\n" .
			'reset' . "\n" .
			'set terminal png' . "\n" .
			"\n" .
			'set xlabel "False Positive Rate"' . "\n" .
			'set ylabel "True Positive Rate"' . "\n" .
			'set xtics .1' . "\n" .
			'set ytics .1' . "\n" .
			'set xrange [-0.025:1.025]' . "\n" .
			'set yrange [0:1.025]' . "\n" .
			'set title "' . $href->{'-ptitle'} . '"' . "\n" .
			'set grid' . "\n" .
			'set style line 1 lw 2' . "\n" .
			'plot \'' . $href->{'-dname'} . '\' using 1:2 notitle with lines ls 1' . "\n";
	print("\n Plot script : \n");
    print($plotscript);
	open $outFile, '>', $href->{'-sname'} or die "couldn't open file for writing: $!\n";
	print $outFile $plotscript;
	close $outFile or die "couldn't close file: $!\n";
}

sub findAUC {
	my $href = shift @_;
	my @xVals = `cat $href->{'-dname'} | awk \'\{print \$1\}\'`;
	chomp @xVals;
	my @yVals = `cat $href->{'-dname'} | awk \'\{print \$2\}\'`;
	chomp @yVals ;
	my $totalArea = 0;
	for (my $iter = 0; $iter < (scalar @xVals) - 1; $iter++) {
		$totalArea += ($xVals[$iter] - $xVals[$iter+1]) * (($yVals[$iter] + $yVals[$iter+1]) / 2);
	}
	return $totalArea;
}
