// Lets see github.

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;

public class ComparisonDriver {

	private CodeMorphingTool morphing_tool;
	String unique_opcodes_file;
	
	ComparisonDriver(String unique_opcodes) throws IOException {
		morphing_tool = new CodeMorphingTool(new File(unique_opcodes));
		this.unique_opcodes_file = unique_opcodes;
	}

	public String ToOutputCSV(Map<String, HashMap<String, Double>> dir_stats) {
		String output = "";
		ArrayList<String> cols = new ArrayList<String>();

		for (String file : dir_stats.keySet()) {
			String header = "filename , ";
			HashMap<String, Double> row = dir_stats.get(file);
			for (String col : row.keySet()) {
				header += col + " ,";
				cols.add(col);
			}
			output += header + "\n";
			break;
		}

		for (String file : dir_stats.keySet()) {
			String line = file + " , ";

			HashMap<String, Double> row = dir_stats.get(file);

			for (String col : cols) {
				line += String.format("%8.6f , ", row.get(col));
			}
			output += line + "\n";
		}
		return output;
	}

	public Map<String, HashMap<String, Double>> MorphAndCompareDir(
			String base_dir, String unique_opcodes) throws IOException {
		File[] base_files = new File(base_dir).listFiles();
		Map<String, HashMap<String, Double>> dir_stats = new HashMap<String, HashMap<String, Double>>();
		int count = 0;
		for (File m : base_files) {
			System.out.println(count++ + " Processing file : " + m.getName());
			HashMap<String, Double> stats = MorphAndCompare(m.getPath(),
					unique_opcodes);
			dir_stats.put(m.getName(), stats);
		}
		return dir_stats;
	}

	public HashMap<String, Double> MorphAndCompare(String base_file,
			String unique_opcodes) throws IOException {

		ArrayList<String> input_codes = new ArrayList<String>();
		BufferedReader reader = new BufferedReader(new FileReader(base_file));
		String line = null;
		while ((line = reader.readLine()) != null) {
			input_codes.add(line);
		}
		reader.close();
		System.out.println("No of lines in a file" + base_file + " = "
				+ input_codes.size());

		Set<String> opcode_set = new HashSet<String>();
		BufferedReader reader2 = new BufferedReader(new FileReader(
				unique_opcodes));
		while ((line = reader2.readLine()) != null) {
			opcode_set.add(line);
		}
		reader2.close();

		Map<String, ArrayList<String>> morphed = morphing_tool
				.getMultiMorph(input_codes);

		HashMap<String, Double> out_scores = new HashMap<String, Double>();

		float[][] input_trans_matrix = OpcodeGraph.generateTransMatrix(
				input_codes, opcode_set);

		for (String k : morphed.keySet()) {
			ArrayList<String> morph = morphed.get(k);
			double cosine = CosineSimilarity.compareFiles(input_codes, morph);
			out_scores.put("cosine_" + k, cosine);

			// System.out.println("Compare mishra");
			// double mishra = MishrasMethod.compareFiles(input_codes, morph);
			// out_scores.put("mishra_" + k, mishra);

			float[][] morph_trans = OpcodeGraph.generateTransMatrix(morph,
					opcode_set);
			double graph_sim = GraphComparison.compareGraphs(
					input_trans_matrix, morph_trans);
			out_scores.put("graphsim_" + k, graph_sim);
			// double opcodgraph = GraphComparison.compareGraphs(base_file,
			// morph, uniq_opcode_file);
		}
		return out_scores;
	}
	
	public static void writeOutputScores(String filename, String contents)
			throws IOException {
		BufferedWriter wr = new BufferedWriter(new FileWriter(filename));
		wr.write(contents);
		wr.close();
	}
	
	public ArrayList<String> readFiletoArrayList(String filename) throws IOException {
		ArrayList<String> input_codes = new ArrayList<String>();
		BufferedReader reader = new BufferedReader(new FileReader(filename));
		String line = null;
		while ((line = reader.readLine()) != null) {
			input_codes.add(line);
		}
		reader.close();
		return input_codes;
	}
	
	public void computeSimilarity(String base_dir, String morph_dir, String outfile) throws IOException {
		File[] morph_sub_dirs = new File(morph_dir).listFiles();
		
		File[] base_files = new File(base_dir).listFiles();
		Map<String, HashMap<String, Double>> dir_stats = new HashMap<String, HashMap<String, Double>>();
		int count = 0;
		for (File m : base_files) {
//			if (count++ > 5) break;
			System.out.println(count++ + " Processing file : " + m.getName());
			ArrayList<String> base_codes = readFiletoArrayList(m.getPath());
			
			Set<String> opcode_set = new HashSet<String>(readFiletoArrayList(unique_opcodes_file));
			
			float[][] base_trans = OpcodeGraph.generateTransMatrix(base_codes, opcode_set);
			
			HashMap<String, Double> stats = new HashMap<String, Double>();
			String filename = m.getName();
			for (File morph_sub_dir : morph_sub_dirs) {
				if (!morph_sub_dir.isDirectory()) continue;
				String fullpath = morph_sub_dir.getPath() + "/" + filename;
				ArrayList<String> morph_codes = readFiletoArrayList(fullpath);
				
				double cosine = CosineSimilarity.compareFiles(base_codes, morph_codes);
				stats.put(morph_sub_dir.getName() + "_cosine", cosine);

//				double mishra = MishrasMethod.compareFiles(base_codes, morph_codes);
//				stats.put(morph_sub_dir.getName() + "_mishra", mishra);

				float[][] morph_trans = OpcodeGraph.generateTransMatrix(morph_codes, opcode_set);
				
				double graph_sim = GraphComparison.compareGraphs(
						base_trans, morph_trans);
				stats.put(morph_sub_dir.getName() + "_opcodegr", graph_sim);				
			}				
			dir_stats.put(m.getName(), stats);
		}
		
		writeOutputScores(outfile, ToOutputCSV(dir_stats));
		
//		return dir_stats;
	}

	public static void main(String[] args) throws IOException {
		// String
		// base_dir="/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zbot_opcodes/zbot_base/";
		// String
		// uniq_opcodes="/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zbot_opcodes/zbot_uniq_symbols.txt";
		// String score_file =
		// "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zbot_opcodes/zbot_scores/Zbot_Trans_morph.csv";

//		String base_dir = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zeroaccess_opcodes/base";
//		String morph_dir = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zeroaccess_opcodes/zeroaccess_morph/";
//		String uniq_opcodes = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zeroaccess_opcodes/zeroaccess_uniq_symbols.txt";
//		String score_file = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zeroaccess_opcodes/zeroaccess_scores/zeroaccess_mishras.csv";
////		
		
//		String base_dir = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zbot_opcodes/base";
//		String morph_dir = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zbot_opcodes/zbot_morph/";
//		String uniq_opcodes = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zbot_opcodes/zbot_uniq_symbols.txt";
//		String score_file = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zbot_opcodes/zbot_scores/zbot_allexceptmishras.csv";
		
		String base_dir = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/winwebsec/base";
		String morph_dir = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/winwebsec/MorphedOutput/";
		String uniq_opcodes = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/winwebsec/winwebsec_uniq_symbols.txt";
		String score_file = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/winwebsec/winweb_scores/winweb_allexceptmishras.csv";
//		
		
//		String base_dir = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/base";
//		String morph_dir = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_morph/";
//		String uniq_opcodes = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_uniq_symbols.txt";
//		String score_file = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_scores/mwor_all.csv";
		
		ComparisonDriver driver = new ComparisonDriver(uniq_opcodes);
		// Map<String, Double> scores = driver.MorphAndCompare(base_file,
		// uniq_opcodes);
		// System.out.println(scores.toString());
		//Map<String, HashMap<String, Double>> stats = driver.MorphAndCompareDir(base_dir, uniq_opcodes);
		//ComparisonDriver.writeOutputScores(score_file,driver.ToOutputCSV(stats));
		driver.computeSimilarity(base_dir,morph_dir,score_file);
		
		System.out.println("finished check score file");
	}
}
