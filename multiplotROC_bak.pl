#!/usr/bin/perl
#use strict;
use File::Path qw(make_path);
use warnings;
use diagnostics;
use Scalar::Util qw(looks_like_number);

################
# MAIN PROGRAM #
################

$columnID=2; # 0 for the first column.
$maxLineCount=100000;
@plotLegend=("10%", "20%", "30%", "40%");

($bf, $mf, $columnID, $plotTitle, $workingDir) = @ARGV;

eval { make_path($workingDir) };
if ($@) {
  print "Couldn't create $workingDir: $@";
}

$plotoutput = $workingDir . "/roc-plot.png";
$gnuplotScriptFile=$workingDir . "/plotme.sh";
$plotDataPrefix=$workingDir . "/plotdata";

my @bfiles = split(',', $bf);
my @mfiles = split(',', $mf);

if ($#bfiles != $#mfiles) {
	print "\nError! Differnet number of benign and morphfiles.\n";
	exit 1;
}

my @plotFiles;
for (my $i=0; $i <= $#bfiles; $i++) {
	my $plotfile = $plotDataPrefix . "_" . $i . ".txt";
	print "\n $bfiles[$i] $mfiles[$i] $plotfile\n";
	push @plotFiles, $plotfile;
	writePlotData( $bfiles[$i],$mfiles[$i],$columnID,$maxLineCount, $plotfile);
}

open $outFile, '>', $workingDir . "/AUC.txt" or die "couldn't open file for writing: $!\n";
for (my $i=0; $i <= $#bfiles; $i++) {
				print "\n AUC : " . findAUC($plotFiles[$i]) . " @ $bfiles[$i]";
				print $outFile "\n AUC : " . findAUC($plotFiles[$i]) . " $plotLegend[$i]  @ $bfiles[$i]\n";
}
close $outFile or die "couldn't close file: $!\n";

generatePlot( $plotoutput, $plotTitle, @plotFiles);

exit 0;

###############
# SUBROUTINES #
###############

sub writePlotData {
				my ($bfile, $mfile, $column_id, $max_count, $plotdata) = @_;
				my @bs;
				my @ms;
				open $inFile, '<', $bfile or die "couldn't open file for reading: $!\n";
				my $count = 0;
				while (my $data = <$inFile>) {
								chomp $data;
								my @values = split(',', $data);
								my $score = $values[$column_id];

								if (looks_like_number($score)) {
												$count = $count + 1;
												if ($count > $max_count) {last;}
												push @bs, $score;
								}

								$count = $count + 1;
								if ($count > $max_count) {last;}
				}
				close $inFile or die "couldn't close file: $!\n";
				open $inFile, '<', $mfile or die "couldn't open file for reading: $!\n";
				$count = 0;
				while (my $data = <$inFile>) {
								chomp $data;
								my @values = split(',', $data);
								my $score = $values[$column_id];
								if (looks_like_number($score)) {
												$count = $count + 1;
												if ($count > $max_count) {last;}
												push @ms, $score;
								}
								$count = $count + 1;
								if ($count > $max_count) {last;}
				}
				close $inFile or die "couldn't close file: $!\n";

				my @thresholds;
				foreach my $score (@bs) {
								push @thresholds, $score;
				}
				foreach my $score (@ms) {
								push @thresholds, $score;
				}

				@thresholds = sort {$a <=> $b} @thresholds;

				my $tempfile = $plotdata . "_unsorted";

				my $outFile;
				open $outFile, '>', $tempfile or die "couldn't open file for writing: $!\n";
				my $truePos;
				my $falsePos;
				foreach my $tvalue (@thresholds) {
								$truePos = 0;
								$falsePos = 0;
								foreach my $score (@ms) {
												$score >= $tvalue ? $truePos++ : print "";
								}
								foreach my $score (@bs) {
												$score >= $tvalue ? $falsePos++ : print "";
								}
								$truePos = $truePos / scalar @ms;
								$falsePos = $falsePos / scalar @bs;
								print $outFile "$falsePos $truePos\n";
				}
				print $outFile "0 0\n";
				close $outFile or die "couldn't close file: $!\n";

				system "sort -n +0 -1 " . $tempfile . " > " . $plotdata;
}

sub generatePlot {
	my ($plotoutput, $plotTitle, @plotfiles) = @_;
	print "\n Plotfile : $plotoutput\n";

	my $flat_files = join(" ", @plotfiles);

	my $plotcmd = "plot ";
	for (my $i=0; $i <= $#bfiles; $i++) {
		if ($i > 0 ) {
			$plotcmd = $plotcmd . " , ";
		}
		my $f = $plotfiles[$i];
		$plotcmd = $plotcmd . " \"" . $f . "\" using 1:2 with lines title \"" . $plotLegend[$i] . "\" ";
	}

#			'plot for [file in filelist] file using 1:2 with lines' . "\n";

	my $plotscript = 
			'#!/usr/bin/gnuplot' . "\n" .
			'reset' . "\n" .
			'set terminal png' . "\n" .
			'set xlabel "False Positive Rate"' . "\n" .
			'set ylabel "True Positive Rate"' . "\n" .
			'set xtics .1' . "\n" .
			'set ytics .1' . "\n" .
			'set key right bottom' . "\n".
			'set xrange [-0.025:1.025]' . "\n" .
			'set yrange [0:1.025]' . "\n" .
			'set title "' . $plotTitle . '"' . "\n" .
			'set grid' . "\n" .
			'set style line 1 lw 2' . "\n" .
			'filelist = "' . $flat_files .'"' . "\n" .
			$plotcmd. "\n";

	open $outFile, '>',	$gnuplotScriptFile or die "couldn't open file for writing: $!\n";
	print $outFile $plotscript;
	close $outFile or die "couldn't close file: $!\n";

# run the plot script
	system "chmod u+x " . $gnuplotScriptFile;
	system 	"./" . $gnuplotScriptFile . " > " . $plotoutput ;

	print "\n Plot generated at $plotoutput \n";
}

sub findAUC {
	my ($plotdata) = @_;
	my @xVals = `cat $plotdata | awk \'\{print \$1\}\'`;
	chomp @xVals;
	my @yVals = `cat $plotdata | awk \'\{print \$2\}\'`;
	chomp @yVals ;
	my $totalArea = 0;
	for (my $iter = 0; $iter < (scalar @xVals) - 1; $iter++) {
		$totalArea += abs($xVals[$iter] - $xVals[$iter+1]) * abs(($yVals[$iter] + $yVals[$iter+1]) / 2);
	}
	return $totalArea;
}
