import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MorphVsMorph {

	private CodeMorphingTool morphing_tool;
	String unique_opcodes_file;

	MorphVsMorph(String unique_opcodes) throws IOException {
		morphing_tool = new CodeMorphingTool(new File(unique_opcodes));
		unique_opcodes_file = unique_opcodes;
	}

	public void GenerateMorphInDir(String base_dir, String out_dir)
			throws IOException {
		File[] base_files = new File(base_dir).listFiles();
//
		int count = 0;
		for (File m : base_files) {
			String new_file_name = "asm_" + count++ + ".txt";

			ArrayList<String> input_codes = new ArrayList<String>();
			BufferedReader reader = new BufferedReader(new FileReader(
					m.getPath()));
			String line = null;
			while ((line = reader.readLine()) != null) {
				input_codes.add(line);
			}
			reader.close();
			Map<String, ArrayList<String>> morphed = morphing_tool
					.getMultiMorph(input_codes);
			morphed.put("base", input_codes);
			for (String key : morphed.keySet()) {
				String cur_dir = out_dir + "/" + key + "/";
				File theDir = new File(cur_dir);
				if (!theDir.exists()) {
					System.out
							.println("creating directory: " + theDir.toPath());
					boolean result = false;
					try {
						theDir.mkdir();
						result = true;
					} catch (SecurityException se) {
						// handle it
					}
					if (result) {
						System.out.println("DIR created");
					}
				}

				BufferedWriter writer = new BufferedWriter(new FileWriter(
						cur_dir + new_file_name));
				for (String str : morphed.get(key)) {
					writer.write(str);
					writer.newLine();
				}
				writer.close();
			}
		}
	}

	public void GenerateMorphVsBenign(String morph_dir, String benign_dir,
			String score_file) throws IOException {

		File[] base_files = new File(morph_dir).listFiles();
		List<ArrayList<String>> all_morphed_files = new ArrayList<ArrayList<String>>();
		List<ArrayList<String>> all_benign_files = new ArrayList<ArrayList<String>>();

		int count = 0;
		BufferedReader reader;
		for (File m : base_files) {
			count++;
			ArrayList<String> input_codes = new ArrayList<String>();
			reader = new BufferedReader(new FileReader(m.getPath()));
			String line = null;
			while ((line = reader.readLine()) != null) {
				input_codes.add(line);
			}
			reader.close();
			all_morphed_files.add(input_codes);
			System.out.println("Reading file : " + count);
		}

		File[] benign_files = new File(benign_dir).listFiles();
		for (File m : benign_files) {
			count++;
			ArrayList<String> input_codes = new ArrayList<String>();
			reader = new BufferedReader(new FileReader(m.getPath()));
			String line = null;
			while ((line = reader.readLine()) != null) {
				input_codes.add(line);
			}
			reader.close();
			all_benign_files.add(input_codes);
			System.out.println("Reading file : " + count);
		}

		Set<String> opcode_set = new HashSet<String>();
		BufferedReader reader2 = new BufferedReader(new FileReader(
				unique_opcodes_file));
		String line;
		while ((line = reader2.readLine()) != null) {
			opcode_set.add(line);
		}
		reader2.close();

		// -----------------------------------------------------------------
		// Compare M * N comparison

		BufferedWriter wr = new BufferedWriter(new FileWriter(score_file));

		int limit1 = all_morphed_files.size();
		int limit2 = all_benign_files.size();

		for (int i = 0; i < limit1; i++) {
			ArrayList<String> op1 = all_morphed_files.get(i);// .get(key);
			float[][] trans1 = OpcodeGraph.generateTransMatrix(op1, opcode_set);

			for (int j = 0; j < limit2; j++) {
				ArrayList<String> op2 = all_benign_files.get(j);// .get(key);
				double cos_benign = CosineSimilarity.compareFiles(op1, op2);
				float[][] trans2 = OpcodeGraph.generateTransMatrix(op2,opcode_set);
				double graph_sim_benign = GraphComparison.compareGraphs(trans1,
						trans2);

				// double mish = MishrasMethod.compareFiles(op1, op2);
				double mish_benign = 0;

				wr.write(String.format("%d, %d, %5.4f, %5.4f, %5.4f ", i, j,
						cos_benign, graph_sim_benign, mish_benign));
				wr.newLine();
			}
			System.out.println("Compare done : " + i);
		}
		wr.close();

		// -----------------------------------------------------------------

	}

	public void GenerateMorphVsMorph(String morph_dir, String score_file)
			throws IOException {

		File[] base_files = new File(morph_dir).listFiles();
		List<ArrayList<String>> all_morphed_files = new ArrayList<ArrayList<String>>();
		int count = 0;
		BufferedReader reader;
		for (File m : base_files) {
			count++;
			ArrayList<String> input_codes = new ArrayList<String>();
			reader = new BufferedReader(new FileReader(m.getPath()));
			String line = null;
			while ((line = reader.readLine()) != null) {
				input_codes.add(line);
			}
			reader.close();

			all_morphed_files.add(input_codes);
			System.out.println("Reading file : " + count);
		}

		Set<String> opcode_set = new HashSet<String>();
		BufferedReader reader2 = new BufferedReader(new FileReader(
				unique_opcodes_file));
		String line;
		while ((line = reader2.readLine()) != null) {
			opcode_set.add(line);
		}
		reader2.close();

		// -----------------------------------------------------------------
		// Compare N-choose-2 for base

		BufferedWriter wr = new BufferedWriter(new FileWriter(score_file));

		wr.write(String.format("file1,file2,cosine,opgraph,mishra"));
		wr.newLine();

		int limit = all_morphed_files.size();
		for (int i = 0; i < limit; i++) {
			ArrayList<String> op1 = all_morphed_files.get(i);// .get(key);
			float[][] trans1 = OpcodeGraph.generateTransMatrix(op1, opcode_set);
			for (int j = i + 1; j < limit; j++) {
				ArrayList<String> op2 = all_morphed_files.get(j);// .get(key);
				double cos = CosineSimilarity.compareFiles(op1, op2);
				float[][] trans2 = OpcodeGraph.generateTransMatrix(op2,
						opcode_set);
				double graph_sim = GraphComparison
						.compareGraphs(trans1, trans2);
//				double mish = MishrasMethod.compareFiles(op1, op2);
				double mish =0;
				wr.write(String.format("%d, %d, %5.4f, %5.4f, %5.4f ", i, j,
						cos, graph_sim, mish));
				wr.newLine();
			}
			System.out.println("Compare done : " + i);
		}
		wr.close();

		// -----------------------------------------------------------------

	}

	public static void main(String args[]) throws IOException {

	
		 String uniq_symbols= args[0];
		 MorphVsMorph driver = new MorphVsMorph(uniq_symbols);
		 String benign_dir = args[1];
		 String base_dir =args[2];	
		 String morph_dir = args[3];
		 driver.GenerateMorphInDir(base_dir,morph_dir);
		 
		 
//		// Generate morph vs morph , Give the morph directory and the score file
//		driver.GenerateMorphVsMorph(args[2], args[3]);
//		// Generate morph vs Benign , Give the morph directory ,benign diretory and the score file
//		driver.GenerateMorphVsBenign(args[2], args[1],args[4]);
//		System.out.println("done -- check the files for "+args[2]);
		 
// String base_dir =
// "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zeroaccess_opcodes/zeroaccess_morph/del_0.1/";
// String uniq_opcodes =
// "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zeroaccess_opcodes/zeroaccess_uniq_symbols.txt";

// String out_dir =
// "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zeroaccess_opcodes/zeroaccess_morph/";
// driver.GenerateMorphInDir(base_dir, out_dir);
		
			//Code to generate only morph files 
//		 String zeroaccess_uniq ="/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_uniq_symbols.txt";
//		 MorphVsMorph driver = new MorphVsMorph(zeroaccess_uniq); 
//		 String zeroaccess_base ="/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_base/";
//		 String zeroaccess_morph = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_morph/";
//		 driver.GenerateMorphInDir(zeroaccess_base, zeroaccess_morph);
		
//		 * String mwor_uniq =
//		 * "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_uniq_symbols.txt"
//		 * ; MorphVsMorph driver = new MorphVsMorph(mwor_uniq); String mwor_base
//		 * =
//		 * "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_base"
//		 * ; String mwor_morph =
//		 * "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/mwor_opcodes/mwor_morph"
//		 * ; driver.GenerateMorphInDir(mwor_base, mwor_morph); code to genrate
//		 * morph files end here
		 

	}
}
