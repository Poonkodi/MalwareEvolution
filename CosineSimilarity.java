/*
 * Author: PoonkodiPonnambalam
 * Code: Computes cosine similarity between 2 files
 * 		 Each file has list of  opcodes, one opcode  in each line
 * Date: April 5th 2015
 * version:1.0
 */
import java.io.IOException;
import java.util.*;

public class CosineSimilarity {
	/*
	 * Given two vectors.
	 * returns a.b / sqrt(a^2 + b^2)
	 */
	//
	public static double cosineSimilarity(Map<String, Integer> v1, Map<String, Integer> v2) {
		Set<String> both = new HashSet<String>(v1.keySet());
		both.retainAll(v2.keySet());
		double sclar = 0, norm1 = 0, norm2 = 0;
		for (String k : both) sclar += v1.get(k) * v2.get(k);
		for (String k : v1.keySet()) norm1 += v1.get(k) * v1.get(k);
		for (String k : v2.keySet()) norm2 += v2.get(k) * v2.get(k);
		return sclar / Math.sqrt(norm1 * norm2);
	}


	public static Map<String, Integer> ListToMap(ArrayList<String> input) throws IOException {
		Map<String, Integer> map = new  HashMap<String, Integer>();		
		for (String line : input) {
			if(!map.containsKey(line))
				map.put(line, 1);
			else
				map.put(line,map.get(line)+1);
		}
		return map;
	}

	public static double compareFiles(ArrayList<String> f1, ArrayList<String> f2) throws IOException {
		Map<String,Integer> m1= ListToMap(f1);
		Map<String,Integer> m2= ListToMap(f2);	
		if (m1.size() ==0 || m2.size() ==0) return 0.0;
		return cosineSimilarity(m1,m2);
	}
}
