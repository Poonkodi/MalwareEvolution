/*
 * Author: PoonkodiPonnambalam
 * Code: Computes cosine similarity between 2 files
 * 		 Each file has list of  opcodes, one opcode  in each line
 * Date: April 5th 2015
 * version:1.0
 */
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;


public class CosineSimilarity {
	/*
	 * Given two vectors.
	 * returns a.b / sqrt(a^2 + b^2)
	 */
	//
	public static double cosineSimilarity(Map<String, Integer> v1, Map<String, Integer> v2) {
		Set<String> both = new HashSet<String>(v1.keySet());
		both.retainAll(v2.keySet());
		double sclar = 0, norm1 = 0, norm2 = 0;
		for (String k : both) sclar += v1.get(k) * v2.get(k);
		for (String k : v1.keySet()) norm1 += v1.get(k) * v1.get(k);
		for (String k : v2.keySet()) norm2 += v2.get(k) * v2.get(k);
		return sclar / Math.sqrt(norm1 * norm2);
	}

	public static Map<String, Integer> getCosineFeatures(File file) throws IOException {
		Map<String, Integer> map = new  HashMap<String, Integer>();
		BufferedReader br = new BufferedReader(new FileReader(file));

		String line;
		while ((line = br.readLine()) != null) {
			line = line.trim();
			if(!map.containsKey(line))
				map.put(line, 1);
			else
				map.put(line,map.get(line)+1);
		}
		br.close();

		return map;
	}

	public static double compareFiles(File f1, File f2) throws IOException {
		System.out.println("Processing file: " +f1);
		Map<String,Integer> m1= getCosineFeatures(f1);
		System.out.println("Processing file : " + f2);
		Map<String,Integer> m2= getCosineFeatures(f2);
		return cosineSimilarity(m1,m2);
	}


	public static void compareDirs(String dir1, String dir2, String output_dir) throws IOException {

		File[] files1 = new File(dir1).listFiles();
		File[] files2 = new File(dir2).listFiles();
		if (files1.length != files2.length) {
			System.out.println("Error: Different number of files");
			return;
		}
		BufferedWriter br = new BufferedWriter(new FileWriter(output_dir+"/"+"CosineScore.txt",true));
		
		for (int i = 0; i < files1.length; i++) {
			System.out.println("Processing files " + i);
			double score = compareFiles(files1[i], files2[i]);
			br.write(files1[i].getName()+" , "+files2[i].getName() + " , " + score + "\n");
		}
		br.close();
	}

	public static void writeComparisons(String base, String[] morphs, String outfile) throws IOException {

		// mwor_0.5
		File[] base_file = new File(base).listFiles();

		// mwor_1.0, 1.5,2.0,3.0
		List<File[]> file_lists = new ArrayList<File[]>();
		for (String m : morphs) {
			File[] mor_file = new File(m).listFiles();
			file_lists.add(mor_file);
		}
		
		BufferedWriter br = new BufferedWriter(new FileWriter(outfile));
		// Header.
		br.write("filename ,");
		for (String m : morphs) {
			br.write(m + ",");
		}
		br.newLine();
		
		
		for (int i = 0; i < base_file.length; i++) {
			br.write(base_file[i].getName() + ", ");
			for (File[] ff : file_lists) {
				double cosine = CosineSimilarity.compareFiles(base_file[i], ff[i]);
				
//				if (true) {
//					br.write(ff[i].getName() + "@");
//				}
				br.write(cosine + ", ");
			}
			br.newLine();
		}
		br.close();
	}
	
	
	public static void main(String[] args) throws IOException {

		String base = "/home/dragon/abitha/CS297/InputFiles/0_5/";
		String[] morphs = {"/home/dragon/abitha/CS297/InputFiles/1_0/",
				"/home/dragon/abitha/CS297/InputFiles/1_5/",
				"/home/dragon/abitha/CS297/InputFiles/2_0/",
				"/home/dragon/abitha/CS297/InputFiles/3_0/"};
		String outfile = "/home/dragon/abitha/CS297/cosine_comparison.csv";
		
		writeComparisons(base, morphs, outfile);
		
		//compareDirs(args[0], args[1], args[2]);
	}

}
