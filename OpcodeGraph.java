import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * @author Poonkodi Ponnambalam
 */
public class OpcodeGraph {
	Map<String, Integer> opcodemap;
	List<String> opcodelist;
	Set<String> opcodeset;
	float transmatrix[][];
	int size_N;

	OpcodeGraph(File distinct_filename) throws IOException {
		opcodeset = new HashSet<String>();
		BufferedReader br = new BufferedReader(
				new FileReader(distinct_filename));
		String line = null;
		while ((line = br.readLine()) != null) {
			opcodeset.add(line);
		}
		br.close();
		size_N = opcodeset.size();
		opcodemap = new HashMap<String, Integer>();
		opcodelist = new ArrayList<String>();
		transmatrix = new float[size_N][size_N];
	}

	public OpcodeGraph(Set<String> opcode_set) {
		this.opcodeset = opcode_set;

		size_N = opcodeset.size();
		opcodemap = new HashMap<String, Integer>();
		opcodelist = new ArrayList<String>();
		transmatrix = new float[size_N][size_N];
	}

	public void intialiseMatrix() {
		for (int i = 0; i < size_N; i++) {
			for (int j = 0; j < size_N; j++) {
				transmatrix[i][j] = 0;
			}
		}
	}

	public void intialiseIndex() throws IOException {
		Iterator<String> itr = opcodeset.iterator();
		int count = 0;
		while (itr.hasNext()) {
			String op = itr.next();
			opcodemap.put(op, count);
			opcodelist.add(op);
			count++;
		}
	}


	public void readOpcodes(ArrayList<String> opcode_list) throws IOException {
		
		if (opcode_list.size() ==0) return;
		int i = 0;
		String opcode1 = opcode_list.get(i);
		String opcode2 = null;
		for(  i  = 1; i < opcode_list.size(); i++) {
			opcode2 = opcode_list.get(i);
			
			int index1 = opcodemap.get(opcode1);
			int index2 = opcodemap.get(opcode2);
			
			opcode1 = opcode2;
			transmatrix[index1][index2] =transmatrix[index1][index2]+1;
		}
	}
	
	public void normaliseMatrix() {
		int sum = 0;
		for (int i = 0; i < size_N; i++) {
			sum = 0;
			for (int j = 0; j < size_N; j++) {
				sum += transmatrix[i][j];
			}
			if (sum > 0) {
				for (int j = 0; j < size_N; j++)
					transmatrix[i][j] = transmatrix[i][j] / sum;
			}
		}
	}

	public float[][] getTransMatrix() {
		return transmatrix;
	}
	
	public static float[][] generateTransMatrix(ArrayList<String> input_codes,
			Set<String> opcode_set) throws IOException {
		OpcodeGraph g = new OpcodeGraph(opcode_set);
		g.intialiseMatrix();
		g.intialiseIndex();
		g.readOpcodes(input_codes);
		g.normaliseMatrix();
		return g.getTransMatrix();
	}
}
