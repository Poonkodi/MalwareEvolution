package OpcodeGraphpkg;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;


/**
 * @author vinodh
 *
 */
public class OpcodeGraph {

	Map<String,Integer> opcodemap;
	List<String> opcodelist;
	Set<String> opcodeset;
	DistinctOpcodes d;
	float transmatrix[][];
	int size_N;

	OpcodeGraph() throws IOException
	{
		String distinct_filename = "/Users/vinodh/abitha/Fall2015/CS298/InputOpcodes/zeroaccess_opcodes/zeroaccess_uniq_symbols.txt";
		d=new DistinctOpcodes(distinct_filename);
		opcodemap=new HashMap<String,Integer>();
		opcodelist=new ArrayList<String>();
		opcodeset=d.getOpcodeset();
		size_N=d.getOpcodesetSize();
		transmatrix=new float[size_N][size_N];

	}

	public void intialiseMatrix()
	{
		for(int i=0;i<size_N;i++) {
			for(int j=0;j<size_N;j++) {
				transmatrix[i][j]=0;
			}
		}
	}

	public void intialiseIndex() throws IOException
	{
		Iterator<String> itr = opcodeset.iterator();
		int count=0;
		while(itr.hasNext()){
			String op=itr.next();
			opcodemap.put(op,count);
			opcodelist.add(op);
			count++;
		}
	}

	public void readMalwareOpcodeFile(String filename) throws IOException
	{
		BufferedReader br=new BufferedReader(new FileReader(filename));
		int i=-1,j=-1;
		String opcode1=br.readLine();
		String opcode2=null;
		while((opcode2=br.readLine())!=null)
		{
			i=opcodemap.get(opcode1);
			j=opcodemap.get(opcode2);
			opcode1=opcode2;
			transmatrix[i][j]=transmatrix[i][j]+1;
		}
	}

	public void normaliseMatrix()
	{
		int sum=0;
		for(int i=0;i<size_N;i++)
		{
			sum=0;
			for(int j=0;j<size_N;j++)
			{
				sum+=transmatrix[i][j];
			}
			System.out.println(sum);
			if(sum>0)
			{
				for(int j=0;j<size_N;j++)
					transmatrix[i][j]=transmatrix[i][j]/sum;
			}
		}
	}

	public void printTransitionMatrix() throws IOException
	{
		BufferedWriter bw=new BufferedWriter(
				new FileWriter("/Users/vinodh/abitha/Fall2015/CS298/graph.txt"));
		System.out.println(size_N);
		System.out.println(
				opcodelist.toString().replace(","," ").replace("[","").replace("]",""));
		bw.write(
				opcodelist.toString().replace(",","\t").replace("[","").replace("]",""));
		for(int i=0;i<size_N;i++)
		{
			System.out.println();
			bw.write("\n");
			for(int j=0;j<size_N;j++)
			{
				System.out.print(transmatrix[i][j]+"\t ");
				bw.write(transmatrix[i][j]+"\t"+" ");
			}
		}
		bw.close();
	}

	public float[][] getTransMatrix()
	{
		return transmatrix; 
	}

	public static float[][] file2transMatrix(String filename) throws IOException
	{
		OpcodeGraph g=new OpcodeGraph();
		g.intialiseMatrix();
		g.intialiseIndex();
		g.readMalwareOpcodeFile(filename);
		g.normaliseMatrix();
		return g.getTransMatrix();
	}

	public static void main(String args[]) throws IOException
	{

	}


}
